import numpy as np
import sys
sys.path.append("..")
from graphs import *
from motifs import *
from RandomGraphModel import *
'''
from GraphFactory import *
from GraphOfEdgeArray import *
from RandomGraphMotif import *
'''

class RandomGraphReciprocalAndInOutDegree(RandomGraphModel):  #Might need RandomGraphMotif
    def __init__(self, trippletSeq, numNode, numReciprocal, numAsymmetricEdge):
        self.RESAMPLE_REPEAT = 1000
        self.trippletSeq = trippletSeq
        self.numNode = numNode
        self.numReciprocal = numReciprocal
        self.numAsymmeticEdge = numAsymmetricEdge

    def RandomGraphReciprocalAndInOutDegree(self, ts):
        self.numNode = len(ts[0])
        self.trippletSeq = np.matrix([3], [self.numNode])
        self.trippletSeq[0] = ts[0]
        self.trippletSeq[1] = ts[1]
        self.trippletSeq[2] = ts[2]

        for i in range(len(self.trippletSeq[0])):
            self.numReciprocal += self.trippletSeq[0][i]
            self.numAsymmeticEdge += self.trippletSeq[1][i]

        if self.numReciprocal % 2 == 1:
            self.numNode = 0
            self.numReciprocal = 0
            self.numAsymmeticEdge = 0
            self.trippletSeq = np.matrix([4], [0])
        else:
            self.numReciprocal /= 2

    def getMotifFreq(self, motifSize):
        #TODO: Autogenerated method stub
        return None

    def getMotifFreqFromSampledGraphs(self, motifSize, numOfGraphs):
        res = np.matrix([], [])
        freq = []
        edges = np.matrix([], [])

        if motifSize == 3 or motifSize == -3:
            res = np.matrix([numOfGraphs], [])

            for t in range(numOfGraphs):
                edges = generateDirectedEdgesWithReciprocalAndInOutDegreeTripplet(self.trippletSeq, motifSize, self.numReciprocal, self.numAsymmeticEdge, self.RESAMPLE_REPEAT)
                edges = removeLoopAndMultiEdges(edges)
                gea = GraphOfEdgeArray(edges, True, self.numNode)
                freq = gea.getMotifFreq(motifSize)
                res[t] = [len(freq)]

                for i in range(len(freq)):
                    res[t][i] = freq[i]

        elif motifSize == 4:
            return res

        return res

    def generateRandomGraph(self):
        edges = generateDirectedEdgesWithReciprocalAndInOutDegreeTripplet(self.trippletSeq, self.numNode, self.numReciprocal, self.numAsymmeticEdge, self.RESAMPLE_REPEAT)
        return GraphOfEdgeArray(edges, True, self.numNode)

    def getGraphInfo(self):
        res = np.matrix([6], [])
        res[0] = {self.numNode}
        res[1] = {self.numReciprocal}
        res[2] = {self.numAsymmeticEdge}

        for i in range(3, 6):
            res[i] = [len(self.trippletSeq[i-3])]
            for j in range(len(res[i])):
                res[i][j] = self.trippletSeq[i-3][j]
        return res
